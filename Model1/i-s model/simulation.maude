load model .

mod SIMULATIONS is
  pr ISMODEL .

    --- simulation parameters
    --- - MAX = 10^4
    --- - N = 10
    --- - S = 4
    --- - w = 0.8
    --- - h0 = 0.3
    --- - hs = 4.0
    op experiment1 : -> State .
    eq experiment1 = par(10000,10,4,0.8,0.3,4.0) .
    
    --- simulation parameters
    --- - MAX = 10^4
    --- - N = 10
    --- - S = 4
    --- - w = 0.8
    --- - h0 = 3.0
    --- - hs = 4.0
    op experiment2 : -> State .
    eq experiment2 = par(10000,10,4,0.8,3.0,4.0) .

    --- properties 
    vars n id S : Nat .
    vars ho hp o o' f1 f2 FS : Float .
    vars g : Int .
    vars Ag : Agent .
    vars Net Net' : Network .


    --- Extreme consensus: all agents agree on the same opinion coinciding with one of the poles 
    --- of the opinion spectrum [âˆ’ 1, + 1].
    op extremeConcensus : State -> Bool .
    op extremeConcensus2 : Network -> Bool .
    op extremeConcensus3 : Network Float -> Bool .

    eq extremeConcensus(< {Net}, {Net'}, n, S, ho, hp >) = extremeConcensus2(Net) .
    eq extremeConcensus2( (ag(id,g,o), Net) ) = if o == 1.0 or o == -1.0 then
                                                  extremeConcensus3(Net, o)
                                                  else
                                                  false
                                                  fi .
    eq extremeConcensus3( (ag(id,g,o), Net), o') = if o == o' then
                                                    extremeConcensus3( Net, o')
                                                    else
                                                    false
                                                    fi .
    eq extremeConcensus3( (empty).Network, o') = true .
    
    --- Maximal between-group bi-polarization: both demographic groups have internally reached 
    --- extreme consensus on the opposite poles of the opinion spectrum. When this occurs, the absolute 
    --- difference between the average opinions of the two groups equals 2
    op computeBiPolarization : State -> Float .
    op computeBiPolarization2 : Network Float Float Float -> Float .

    eq computeBiPolarization(< {Net}, {Net'}, n, S, ho, hp >) = computeBiPolarization2(Net, 0.0, 0.0, (float(| Net |) / 2.0)) .
    eq computeBiPolarization2((ag(id,g,o), Net), f1, f2, FS) = if g == 1 then
                                                      computeBiPolarization2(Net, f1 + o, f2, FS)
                                                      else
                                                      computeBiPolarization2(Net, f1, f2 + o, FS)
                                                      fi .
    eq computeBiPolarization2((empty).Network, f1, f2, FS) = abs((f1 / FS) - (f2 / FS)) . 

    op biPolarization : State -> Bool .
    eq biPolarization(< {Net}, {Net'}, n, S, ho, hp >) = computeBiPolarization(< {Net}, {Net'}, n, S, ho, hp >) == 2.0 .


endm