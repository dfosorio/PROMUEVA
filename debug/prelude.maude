----------------------------------
--- Prelude for I-S and I-E models
--- ------------------------------

load sampler .


mod AGENTS is
	pr SAMPLER .
	pr FLOAT .
--- Agents are represented as a tuple ag(id,g,o) where
--- * id is a natural number to identify the agent
--- * g is the group identity {-1,+1}
--- * o is the opinion [-1,1]
	
	sort Agent .
	op ag : Nat Int Float -> Agent [ctor] .

	--- Equations
	vars id id1 id2 S n Pro Con : Nat .
	vars g g1 g2 z1 z2 : Int .
	vars o o1 o2 w p oi oj ho hp R : Float .

	--- get id of agent
	op getID : Agent -> Nat .
	eq getID(ag(id,g,o)) = id .

	--- calculate opinion based on Pro and Con arguments
	op computeOpinion : Nat Nat -> Float .
	eq computeOpinion(Pro, Con) = 2.0 * ( float(Pro) / float(Pro + Con) ) - 1.0 .
	
	--- calculate the probability (based on the opinion o) that the agent communicates a pro argument and
	--- calculate the probability (based on the opinion o) that the agent drops a pro argument 
	--- (both proabilities have the same formula)
	op computeProb : Float -> Float .
	eq computeProb(o) = 0.5 * (o + 1.0) .

	--- computes the magnitude of the opinion adjustment, based on the opinion of agents j,i and 
	--- the memory size S. j shares the argument with i (j --> i)
	op computeOpAdj : Float Float Nat -> Float .
	op computeOpAdj2 : Float Float Nat Float -> Float .
	op computeOpAdj3 : Bool Bool Nat -> Float .
	
	eq computeOpAdj(oj, oi, S) = computeOpAdj2(oj, oi, S, randFloat) .
	eq computeOpAdj2(oj, oi, S, R) = computeOpAdj3((R < computeProb(oj)), (R < computeProb(oi)), S) . 
	eq computeOpAdj3(true,false,S) = 2.0 / float(S) . --- j picks pro, i drops con
	eq computeOpAdj3(false,true,S) = -2.0 / float(S) . --- j picks con, i drops pro
	eq computeOpAdj3(true,true,S) = 0.0 . --- j picks pro, i drops pro
	eq computeOpAdj3(false,false,S) = 0.0 . --- j picks con, i picks con

	--- compute the similarity of two agents Ag1 and Ag2 using:
	--- group identity 1 g1
	--- group identity 2 g2
	--- opinion of agent 1 o1
	--- opinion of agent 2 o2
	--- parameter ho
	op computeSimilarity : Int Float Int Float Float -> Float .
	eq computeSimilarity(g1,o1,g2,o2,ho) = (1.0 - (float(abs(g1 - g2)) + ho * abs(o1 - o2)) / (2.0 + 2.0 * ho)) .

	--- truncatig function, used if the calculated opinion is outside the interval [-1,1]
	op truncatingFunct : Float -> Float .
	ceq truncatingFunct(o) = 1.0 if o > 1.0 .
	ceq truncatingFunct(o) = -1.0 if o < -1.0 .
	eq truncatingFunct(o) = o [owise] .

	--- Interaction between agents Ag1 <- Ag2, i.e.
	--- Ag2 shares an argument to Ag1, and Ag1 updates its opinion
	--- it takes into account:
	--- 	- The two agents Ag1 (first parameter) and Ag2 (second parameter)
	--- 	- ho parameter
	--- 	- hp parameter
	op interaction : Agent Agent Nat Float Float -> Agent .
	eq interaction(ag(id1,g1,o1), ag(id2,g2,o2), S, ho, hp) = ag(id1, g1, truncatingFunct(o1 + computeOpAdj(o1,o2,S) * (computeSimilarity(g1,o1,g2,o2,ho) ^ hp))) .


	--- initialize an Agent using: 
	---   - The id of the agent (id)
	---   - The group it belongs to (g)
	---   -	The size of the memory (S) 
	---   - The pro argument probability (w)
	op initAgent : Nat Int Nat Float -> Agent .
	op initAgent2 : Nat Int Nat Float Nat Nat -> Agent .

	eq initAgent(id,g,S,w) = initAgent2(id,g,S,w,0,0) .
	eq initAgent2(id,g,0,w,Pro,Con) = ag(id,g,computeOpinion(Pro, Con)) .
	
	eq initAgent2(id,1,s(n),w,Pro,Con) = if sampleBerWithP(w) then initAgent2(id,1,n,w,s(Pro),Con) 
															  else initAgent2(id,1,n,w,Pro,s(Con)) fi .	
	eq initAgent2(id,-1,s(n),w,Pro,Con) = if sampleBerWithP(w) then initAgent2(id,-1,n,w,Pro,s(Con)) 
															   else initAgent2(id,-1,n,w,s(Pro),Con) fi . 

endm



--- Definition of view, to be able to construct sets of agents
view Agent from TRIV to AGENTS is
  sort Elt to Agent .
endv


mod NETWORK is 
	pr AGENTS .
	pr SET{Agent} * (sort Set{Agent} to Network, sort NeSet{Agent} to NeNetwork) .

--- Equations:
	vars N S n mid a : Nat .
	vars w : Float .
	vars Net : Network .
	vars Ag Ag2 : Agent .

	--- select the nth argument of a Network
	op selectElement : Network Nat -> Agent .
	eq selectElement((Ag,Net), 0) = Ag .
	eq selectElement((Ag,Net), s(a)) = selectElement(Net, a) .

	--- Randomly select an agent from a Network
	op randomPick : Network -> Agent .
	eq randomPick(Net) = selectElement(Net, genRandom(0,| Net | - 1)) .

	--- replaces the given agent in the network
	op replaceAgent : Agent Network -> Network .
	eq replaceAgent(Ag, (Ag2, Net)) = if getID(Ag) == getID(Ag2)
																		then Ag, Net
																		else Ag2, replaceAgent(Ag, Net)
																		fi .
	eq replaceAgent(Ag, (empty).Network) = (empty).Network .

	--- initialize a network. The parameters are:
	---   - The size of the network (N)
	---   -	The size of the memory (S)
	---   - The pro argument probability (w)
	--- Half of the network will belong to group +1 and the other half to group -1
	op initNetwork : Nat Nat Float -> Network .
	op initNetwork2 : Nat Nat Float Nat -> Network .

	eq initNetwork(N, S, w) = initNetwork2(N, S, w, N quo 2) .
	eq initNetwork2(s(n),S,w,mid) = if s(n) <= mid 
									then initAgent(s(n),1,S,w) , initNetwork2(n,S,w,mid)
									else initAgent(s(n),-1,S,w) , initNetwork2(n,S,w,mid)
									fi .
	eq initNetwork2(0,S,w,mid) = (empty).Network .

endm 


mod PRELUDE is
	pr NETWORK .
endm